(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{615:function(t,e,s){"use strict";s.r(e);var i=s(19),v=Object(i.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"git-commit-提交规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-提交规范"}},[t._v("#")]),t._v(" git commit 提交规范")]),t._v(" "),s("p",[t._v("git commit 提交代码时，commit message 应该清晰明了，说明本次提交的目的，具体做了什么内容，这对于协作开发，代码维护乃至代码回滚都非常有用。但在日常开发中，大家往往对 commit message 不够重视，每个人写的 message 格式都不一样，有些写的过于笼统，导致意义不大。基于这些问题，我们希望用文档的形式把 commit message 规范确定下来，大家按规范编写提交 message。")]),t._v(" "),s("h4",{attrs:{id:"commit-message-格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit-message-格式"}},[t._v("#")]),t._v(" commit message 格式")]),t._v(" "),s("p",[t._v("我搜索了一些关于 git commit 的资料，比较推崇的是 Angular 的规范。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<type>(<scope>): <subject>\n")])])]),s("p",[s("strong",[t._v("type(必须)")])]),t._v(" "),s("p",[t._v("用于说明 git commit 的类别，只允许使用下面的标示。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("feat：新功能（feature）。")])]),t._v(" "),s("li",[s("p",[t._v("fix/to：修复 bug，可以是 QA 发现的 BUG，也可以是研发自己发现的 BUG。")]),t._v(" "),s("p",[t._v("fix：产生 diff 并自动修复此问题。适合于一次提交直接修复问题\nto：只产生 diff 不自动修复此问题。适合于多次提交。最终修复问题提交时使用 fix")])]),t._v(" "),s("li",[s("p",[t._v("docs：文档（documentation）。")])]),t._v(" "),s("li",[s("p",[t._v("style：格式（不影响代码运行的变动）。")])]),t._v(" "),s("li",[s("p",[t._v("refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）。")])]),t._v(" "),s("li",[s("p",[t._v("perf：优化相关，比如提升性能、体验。")])]),t._v(" "),s("li",[s("p",[t._v("test：增加测试。")])]),t._v(" "),s("li",[s("p",[t._v("chore：构建过程或辅助工具的变动。")])]),t._v(" "),s("li",[s("p",[t._v("revert：回滚到上一个版本。")])]),t._v(" "),s("li",[s("p",[t._v("merge：代码合并。")])]),t._v(" "),s("li",[s("p",[t._v("sync：同步主线或分支的 Bug。")])])]),t._v(" "),s("p",[s("strong",[t._v("scope(可选)")])]),t._v(" "),s("p",[t._v("scope 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。")]),t._v(" "),s("p",[s("strong",[t._v("subject(必须)")])]),t._v(" "),s("p",[t._v("subject 是 commit 目的的简短描述，不超过 50 个字符。")]),t._v(" "),s("p",[t._v("建议使用中文（感觉中国人用中文描述问题能更清楚一些）。")]),t._v(" "),s("p",[t._v("以上就是我们梳理的 git commit 规范，那么我们这样规范 git commit 到底有哪些好处呢？")]),t._v(" "),s("p",[t._v("便于程序员对提交历史进行追溯，了解发生了什么情况。\n一旦约束了 commit message，意味着我们将慎重的进行每一次提交，不能再一股脑的把各种各样的改动都放在一个 git commit 里面，这样一来整个代码改动的历史也将更加清晰。\n格式化的 commit message 才可以用于自动化输出 Change log。")]),t._v(" "),s("h2",{attrs:{id:"编码规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编码规范"}},[t._v("#")]),t._v(" 编码规范")]),t._v(" "),s("p",[t._v("参考"),s("a",{attrs:{href:"https://guide.aotu.io/docs/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("凹凸实验室"),s("OutboundLink")],1),t._v("的代码规范")])])}),[],!1,null,null,null);e.default=v.exports}}]);